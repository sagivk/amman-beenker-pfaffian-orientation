the overall goal of the code is to create an AB tiling, orient it in a kasteleyn way and get the eigenpairs of the orientation.

The first task is to create AB tiling, the relevant code for this is “Rhombus”, “Half_Square”, “Square”, “tile_inflate” and “AB_Tiling”.
Firstly, looking at square, half-square and rhombus objects. the objects allow creating a networkx graph in these shapes in certain places according to 2 vertexes of the shape of a single vertex and a degree for the opposite vertex. The square and half-squares have a direction as well to allow inflation according to https://arxiv.org/pdf/2103.01235.pdf .
Next, we look at “tile_inflate”, the class has a function to return inflated versions of squares, rhombuses and half squares.
The last tool for creating an AB tiling is the AB_tiling object. The object is a list of “Rhombus”, “Half_Square” and “Square” obejects. It can be inflated, not changing the object, but creating a new one, an inflated version of the tiling. The inflated version is a list of the shape objects as well. Since every shape can be inflated by itself the inflated version is also a list of shapes. The get_graph function returns a networkx version of the shape list (the get_graph function runs a long time since it validates that one vertex won’t appear as 2 in the final graph).

The second part of the code is about creating an oriented version of the AB graph created by the first part. For this there are the “Graph_Calc_Print” and “G_ex” codes.
The “Graph_Calc_Print” is an object with four attributes: 2 directed networkx graphs, index count of the last node added to the graph and a dictionary that points from the node position to the node number. The 2 graphs are there to allow every edge to have 2 weights, the wanted weight and the opposite pointing in the opposite direction. Directed networkx graphs with weight in both ways have an arrow pointing to both ends of each edge of the graph, not allowing to view the kasteleyn orientation of the graph. This object allows seeing the orientation of the graph, and get the edge weight matrix created from it. Additionally, the object allows getting the eigenpairs of the graph.
The graph_calc_print object also allows viewing only parts of the graphs (using part_graph) or cutting parts of the graph out (using sub_graph). The functions return graph_calc_print objects that allow getting eigenpairs with relative ease.
The “G_ex” class is mainly there to facilitate the transition from AB_tiling object to graph_calc_print object with a kasteleyn orientation that has an 8 fold-symmetry. The relevant function for this is get_AB_tiling_kasteleyn_orientation_graph_calc_print.

the use of the tools can be started be creating a large enough AB_tiling object and than using get_AB_tiling_kasteleyn_orientation_graph_calc_print, which will allow studying the behavior of the oreinted graphs.